{% extends 'threeColumns.html.twig' %}
{% import 'macros.html.twig' as formRender %}

{% block content %}
    {% set committeeType = committeeParams['committeeType'] %}
    {% set isEUB, style, projectLength, translationPrefix, coreDataController = committeeType is same as 'EUB', 'max-width: 60rem', {'maxLength': 200}, 'coreData.', 'AppData--coreData' %}
    {% set conflictPrefix, conflictHint = translationPrefix~'conflict.', 'conflictHintDiv' %}
    {% set conflictYesDescription = (conflictPrefix~'yes')|trans %}
    <div {{ stimulus_controller(coreDataController, {
            'positions': positions,
            'noChoice': 'multiple.choiceTextHint'|trans,
            'conflictHint': [conflictYesDescription,(conflictPrefix~'no')|trans],
            'conflictHintName': conflictHint}) }}>
        {# project title #}
        {% set projectTitle = content.projectTitle %}
        <div id="projectTitle">
            {{ form_label(projectTitle,null,addLabelClass('MetaData-Title')) }}
            <div class="MetaData-Widget">{{ form_widget(projectTitle,{'attr': projectLength|merge(textInput)}) }}</div>
        </div>
        {# project title for participation documents #}
        {% set projectTitlePart, description = content.projectTitleParticipation, content.projectTitleParticipationDescription %}
        {{ formRender.renderButtons(projectTitlePart,{'hint': [translationPrefix~'projectTitleParticipation.'], 'text': [description,{'attributes': projectLength, 'visibility': projectTitlePart.vars.value is same as 'different', 'transfer': [transferInfo,'participants']}], 'stimVisible': {'values': [['different', description.vars.name~'Div']]}, 'addDiv': ['projectTitleParticipation']}) }}
        {# application type #}
        {% set appType, description = content.appType, content.description %}
        {% set appValue, exRe, exReDiv, newTypeDiv = appType.vars.value, ['extended','resubmission'], 'exReDiv', 'newTypeDiv' %}
        <div class="mt-8" id="appType">
            {{ formRender.renderButtons(appType,[]|merge({'stimVisible': {'values': [[exRe,exReDiv]]|merge(not isEUB ? [['new',newTypeDiv]] : [])}})) }}
            {% if not isEUB %}
                {% set appNewType = content.appNewType %}
                <div id="{{ newTypeDiv }}" style="{{ boolToDisplay(appValue is same as 'new') }}">
                    <div class="MetaData-Label mt-4">{{ form_label(appNewType,null,labelDummy) }}</div>
                    {{ formRender.renderButtons(appNewType,noHeading) }}
                </div>
            {% endif %}
            <div class="mt-2" id="{{ exReDiv }}" style="{{ boolToDisplay(appValue in exRe) }}">
                {{ form_label(description,null,addLabelClass('MetaData-Label')) }}
                <div class="MetaData-Widget" style="width: 20rem" {{ stimulus_action('base','preventTagStart','beforeinput') }}>{{ form_widget(description,textInputAttr) }}</div>
                {{ formRender.addHint(translationPrefix~'appType.hint') }}
            </div>
        </div>
        {# qualification #}
        {% if content.qualification is defined %}
        {{ formRender.renderButtons(content.qualification,{'hint': [translationPrefix~'qualification.'], 'stim': [coreDataController,'setApplicantSupervisor'], 'contTarget': ['qualification0',coreDataController,'qualificationYes'], 'addDiv': ['qualification']}) }}
        {% endif %}
        {# information about the applying person and the supervisor #}
        {% set tempPrefix, infoPrefix = translationPrefix~'applicant.', 'multiple.infos.' %}
        <div class="mt-8" id="applicant">
            {{ formRender.addHeading(tempPrefix~'title',{'headingHint': [[tempPrefix~'hint']]}) }}
            {% for type in ['applicant']|merge(content.namesupervisor is defined ? ['supervisor'] : []) %}
                {% set isSupervisor = type is same as 'supervisor' %}
                {% set suffix = isSupervisor ? 'supervisor' %}
                {% set positionSuffix = 'position'~suffix %}
                <div class="mt-4" style="width: fit-content" {% if isSupervisor %} id="supervisor" {{ stimulus_target(coreDataController,'supervisorDiv') }} {% endif %}>
                    <div class="MetaData-Label" style="width: fit-content">
                        {{ ('coreData.applicant.'~type)|trans }}:
                    </div>
                    <div class="MetaData-Widget MetaData-Widget_collection grid gap-x-4" style="grid-template-columns: repeat(2,minmax(min-content,max-content))">
                        {% for info in applicantInfo %}
                            {% set widget, isPosition, isInstitution, isProfessorship = content[info~suffix], info is same as 'position', info is same as 'institution', info is same as 'professorship' %}
                            {% set vars, tempPrefix = widget.vars, infoPrefix~info %}
                            {% set name = vars.name %}
                            <div class="flex justify-content-end" id="{{ type~info }}">
                                {% if info is same as 'phone' and not isSupervisor and isEUB %}
                                    <div id="phoneLabelOptional" class="align-self-center" style="text-align: end">{{ (infoPrefix~'phoneOptional')|trans~':' }}</div>
                                {% endif %}
                                {{ form_label(widget,(tempPrefix~(isInstitution ? 'Applicant'))|trans~':',{'id': name, 'label_attr': addClass('align-self-center')|merge({'id': name~'Label'})}) }}
                                {% if isInstitution or isProfessorship %}
                                    <div {% if isProfessorship %} id="{{ positionSuffix~'Hint' }}" style="{{ boolToDisplay(content[positionSuffix].vars.value in ['student','phd']) }}" {% endif %}>
                                        {{ formRender.addIcon((tempPrefix~'Hint')|trans,'black') }}
                                    </div>
                                {% endif %}
                            </div>
                            <div {% if isPosition %} {{ stimulus_action(coreDataController,'setProfessorshipHint','change') }} {% endif %}>
                                {{ form_widget(widget,{'id': name, 'attr': {'style': 'width: 100%'~(isPosition ? '; text-overflow: ellipsis')}|merge(isPosition ? addClass('Button_dropdown')|merge(addTarget(coreDataController,type~'Position')) : {})}) }}
                            </div>
                            {% if isPosition %}
                                <div id="{{ positionSuffix~'Other' }}" style="grid-column: 2; {{ boolToDisplay(vars.value is same as 'positionOther') }}">{{ form_widget(content[positionSuffix~'Text']) }}</div>
                            {% endif %}
                        {% endfor %}
                    </div>
                </div>
            {% endfor %}
        </div>
        {# project start  #}
        {% set projectStart, tempPrefix = content.projectStart, translationPrefix~'project.' %}
        {% set startPrefix = tempPrefix~'start.' %}
        <div class="mt-8" id="projectDates">
            {{ formRender.addHeading(tempPrefix~'title') }}
            {{ form_label(projectStart,(startPrefix~'title')|trans({'{committeeType}': committeeType})~':',addLabelClass('MetaData-Label')) }}
            <div class="MetaData-Widget" style="height: min-content; width: fit-content" {{ stimulus_action(coreDataController,'setProjectStart','change') }}>
                {{ form_widget(projectStart,{'attr': {'lang': 'en'}|merge(addTarget(coreDataController,'projectStart'))}) }}
            </div>
            {# project start next #}
            <div class="MetaData-Widget" {{ stimulus_action(coreDataController,'setProjectStart','change') }}>
                {{ formRender.addCheckbox(content.projectStartNext, {'target': [coreDataController,'projectStartNext']}) }}
            </div>
            {% if isEUB %}
                {# data collection has already been started #}
                <div class="MetaData-Widget" {{ stimulus_action(coreDataController,'setProjectStart','change') }}>
                    {{ formRender.addCheckbox(content.projectStartBegun,{'target': [coreDataController,'projectStartBegun']}) }}
                    <div {{ stimulus_target(coreDataController,'projectStartBegunText') }}>
                        {{ formRender.addHint(startPrefix~'hint') }}
                        {{ formRender.addTextfield(content.projectStartBegunText,fontNormal) }}
                    </div>
                </div>
            {% endif %}
            {# project end #}
            {% set projectEnd, tempPrefix = content.projectEnd, tempPrefix~'end.' %}
            <div id="projectEnd">{{ form_label(projectEnd,(tempPrefix~'title')|trans~':',addLabelClass('MetaData-Label mt-4')) }}</div>
            <div class="MetaData-Widget" style="width: fit-content">
                {{ form_widget(projectEnd) }}
            </div>
            {{ formRender.addHint(tempPrefix~'hint') }}
        </div>
        {# funding #}
        <div class="mt-8" id="funding">
            <div class="grid" style="grid-template-columns: minmax(min-content,max-content) min-content">{{ formRender.addHeading(translationPrefix~'funding.title') }}
                <div class="align-self-center">{{ formRender.addPDFhint(transferInfo,'participants') }}</div>
            </div>
            {% set fundingKeys, noFunding = funding|keys, 'fundingQuali' %}
            {% set selection = getAnySelected(content,fundingKeys,noFunding) %}
            {% set noSelected, anySelected = selection[0], selection[1] %}
            <div class="MetaData-Widget" style="{{ style }}" {{ stimulus_action('base','setMultiCheckbox','change',{'single': noFunding, 'multiCheck': fundingKeys|slice(1)}) }}>
                {% for widget in fundingKeys %}
                    {% set curWidget = content[widget] %}
                    {% set vars = curWidget.vars %}
                    {% set isChecked, name = vars.checked, vars.name %}
                    {% set isFunding, textDiv = name is not same as noFunding, name~'Div' %}
                    <div {% if isFunding %} {{ stimulus_action('base','setVisibility','change',{'multi': [[name,textDiv]]})|stimulus_action(coreDataController,'setConflict','change') }} {% endif %} {% if loop.index>1 %} style="{{ topMarginButtons }}" {% endif %}>
                        {{ formRender.addCheckbox(curWidget, {'disable': not isFunding and anySelected or isFunding and noSelected}|merge(name in ['fundingResearch','fundingExternal'] ? {'target': [coreDataController,name]} : {})) }}
                    </div>
                    {% if isFunding %}
                        <div class="mb-4" id="{{ textDiv }}" style="{{ boolToDisplay(isChecked) }}; margin-top: -1rem">
                            {{ formRender.addTextfield(content[widget~'Text']) }}
                            {% if content[widget~'FundingState'] is defined %}
                                <div class="mb-2" id="{{ widget~'fundingStateDiv' }}" style="margin-top:-0.5rem">
                                    {{ formRender.renderButtons(content[widget~'FundingState'],noHeading) }}
                                </div>
                            {% endif %}
                        </div>
                    {% endif %}
                {% endfor %}
            </div>
        </div>
        {# conflict #}
        {% set conflictTextHeight = {'attributes': textHeightLong} %}
        <div class="mt-8" id="conflict">
            {{ formRender.renderButtons(content.conflict,{'hint': [conflictPrefix], 'text': [content.conflictDescription,conflictTextHeight|merge({'hint': conflictYesDescription, 'textHintID': conflictHint})], 'stim': [coreDataController,'setConflict'], 'contTarget': ['conflict1',coreDataController,'conflictNo']}) }} {# correct hint is set in controller, but must not be empty here #}
            {{ formRender.addTextfield(content.participantDescription,conflictTextHeight|merge({'transfer': [transferInfo,'participants'], 'hint': conflictPrefix~'participants'})) }}
        </div>
        {# support #}
        {% set tempPrefix = translationPrefix~'support.' %}
        <div class="mt-8" id="support">
            {{ formRender.addHeading(tempPrefix~'title',{'headingHint': [[tempPrefix~'headingHint']]}) }}
            {% set supportKeys, noSupport = support|keys, 'noSupport' %}
            {% set selection = getAnySelected(content,supportKeys,noSupport) %}
            {% set noSelected, anySelected = selection[0], selection[1] %}
            <div class="MetaData-Widget" style="{{ style }}" {{ stimulus_action('base','setMultiCheckbox','change',{'single': 'noSupport', 'multiCheck': supportKeys|slice(1)}) }}>
                {% for widget in supportKeys %}
                    {% set curWidget, isSupport = content[widget], widget is not same as noSupport %}
                    {% set vars = curWidget.vars %}
                    {% set name = vars.name %}
                    <div class="mt-2" {% if isSupport %} {{ stimulus_action('base','setVisibility','change',{'multi': [[name,name~'TextDiv']]}) }} {% endif %} {% if loop.index>1 %} style="{{ topMarginButtons }}" {% endif %}>
                        {{ formRender.addCheckbox(curWidget, {'disable': not isSupport and anySelected or isSupport and noSelected}) }}
                    </div>
                    {% if isSupport %}
                        {{ formRender.addTextfield(content[name~'Text'],{'visibility': vars.checked, 'attributes': {'style': 'margin-bottom: 1.5rem'}}) }}
                    {% endif %}
                {% endfor %}
            </div>
        </div>
        {# guidelines #}
        {% if isEUB %}
            {% set guidelines, description = content.guidelines, content.guidelinesText %}
            {% set vars = guidelines.vars %}
            {% set name = vars.name %}
            <div class="mt-8" id="guidelinesDiv">
                {{ formRender.addHeading(translationPrefix~'guidelines.title') }}
                <div class="MetaData-Widget" {{ stimulus_action('base','setVisibility','change',{'multi': [[name,description.vars.name~'Div']]}) }}>
                    {{ form_widget(guidelines,{'id': name, 'attr': checkInput}) }}
                    <label class="CheckBox-Label minAutoGrid" for="{{ name }}"><span>{{ (translationPrefix~'guidelines.choice')|trans|raw }}</span></label>
                    {{ formRender.addTextfield(description,{'visibility': vars.checked}) }}
                </div>
            </div>
        {% endif %}
    </div> {# entire form including stimulus controller #}
    {# buttons #}
    {{ formRender.addSubmitButtons() }}
{% endblock %}

{% block preview %}
    {{ formRender.addPreview() }}
{% endblock %}