{% extends 'threeColumns.html.twig' %}
{% import 'macros.html.twig' as formRender %}

{% block content %}
    {% set translationPrefix, burdensRisks, transferArray = 'projectdetails.pages.texts.', isBurdens or isRisks, {'transfer': [transferInfo,addresseeType]} %}
    {% set introTemplate, introHint, isTransfer = 'introTemplateText', 'introHint', transferInfo is not same as [] %}
    <div>
        {{ formRender.addHint(translationPrefix~'hint') }}
        {# intro, goals and procedure #}
        {% for type in ['intro', 'goals', 'procedure'] %}
            {% set isIntro, widget = type is same as 'intro', content[type] %}
            {% set name = widget.vars.name %}
            <div class="mt-8 {% if isIntro %} grid {% endif %}" id="{{ type }}">
                {% if isIntro %}
                    {% set template = content[type~'Template'] %}
                    {% set templateVars = template.vars %}
                    {% set isIntroTemplate = templateVars.checked %}
                    <div id="{{ introHint }}" style="{{ boolToDisplay(not isIntroTemplate) }}; grid-row: 2">{{ formRender.addHint(translationPrefix~'intro.headingHint') }}</div>
                    <div class="template" id="{{ introTemplate }}" style="{{ boolToDisplay(isIntroTemplate) }}; grid-row: 2">{{ introTemplateText }}</div>
                {% endif %}
                {{ formRender.addCountableTextfield(widget,maxCharsIntroGoalsProcedure,transferArray|merge(not isIntro ? {'hint': [[translationPrefix~type~'.'~headingHint,{'multiple': boolToString(true in multipleStudyGroupMeasure)}]]} : {'template': template, 'templateClass' : true, 'visible': not isIntroTemplate, 'stim': ['base','setVisibility',{'multi': [[templateVars.name,introTemplate,[name~'Div',name~'Count',introHint]|merge(isTransfer ? [name~'PDF'] : [])]], 'isGrid': true}]})) }}
            </div>
        {% endfor %}
        {# pro and con #}
        {% set templatePrefix = translationPrefix~'pro.template.' %}
        {% for type in ['pro', 'con'] %}
            {% set template, proEnd = type~'Template', 'proTemplateEnd' %}
            {% set templateVars, templateDiv = content[template].vars, template~'Div' %}
            {% set isPro, isTemplate, widget = type is same as 'pro', templateVars.checked, content[type] %}
            {% set visible, isConBurdensRisks, isProBurdensRisks, name = boolToDisplay(isTemplate,1), not isPro and burdensRisks, isPro or burdensRisks, widget.vars.name %}
            <div class="mt-8 grid" id="{{ type }}">
                {% if isConBurdensRisks %}
                    <div style="grid-row: 2">{{ formRender.addHint(translationPrefix~'con.hint',{'params': {'type': isBurdens ? (isRisks ? 'both' : 'burdens') : 'risks', 'addressee': addresseeString}}) }}</div>
                {% endif %}
                {% set templateText = content.proTemplateText %}
                <div id="{{ templateDiv }}" style="grid-row: {{ isConBurdensRisks ? 3 : 2 }}; {{ visible }}">
                    {% if isPro %}
                        <div class="template">{{ form_label(templateText) }}</div>
                        <div class="grid" style="grid-template-columns: auto min-content">
                            <div class="MetaData-Widget pe-0">{{ form_widget(templateText) }}</div>
                            <div class="pt-1" style="margin-right: 0.3rem">{{ formRender.addPDFhint(transferInfo,addresseeType) }}</div>
                        </div>
                        <div class="template">{{ (templatePrefix~'middle')|trans }}</div>
                        <div class="MetaData-Label mt-2 hint">{{ (templatePrefix~'optional')|trans }}</div>
                    {% else %}
                        <div class="template mb-1">{{ conTemplateText|raw }}</div>
                    {% endif %}
                </div>
                {{ formRender.addCountableTextfield(widget,maxCharsProCon,transferArray|merge({'visible': isProBurdensRisks or not isTemplate, 'template': content[type~'Template'], 'templateClass': true, 'stim': ['base','setVisibility',{'multi': [[templateVars.name,[templateDiv]|merge(isPro ? [proEnd] : []), not isProBurdensRisks ? [name~'Div',name~'Count']|merge(isTransfer ? [name~'PDF'] : []) : []]], 'isGrid': true}]})) }}
                {% if isPro %}
                    <div id="{{ proEnd }}" class="template" style="{{ visible }}">{{ proTemplateEnd }}</div>
                {% endif %}
            </div>
        {% endfor %}
        {# finding text #}
        {% if content.findingText is defined %}
            {% set findingText, template = content.findingText, content.findingTextTemplate %}
            {% set name, templateVars, templateDiv = findingText.vars.name, template.vars, 'findingTemplateDiv' %}
            {% set isTemplate = templateVars.checked %}
            <div class="mt-8 grid" id="findingText">
                <div class="template" id="{{ templateDiv }}" style="{{ boolToDisplay(isTemplate) }}; grid-row: 2">{{ (translationPrefix~'findingText.template')|trans({'consent': boolToString(isConsent), 'addressee': addresseeType}) }}</div>
                {{ formRender.addCountableTextfield(findingText,maxCharsFinding,{'transfer': [['consent',information],addresseeType], 'visible': not isTemplate, 'template': template, 'templateClass' : true, 'stim': ['base','setVisibility',{'multi': [[templateVars.name,templateDiv,[name~'Div',name~'Count']|merge(isTransfer ? [name~'PDF'] : [])]], 'isGrid': true}]}) }}
            </div>
        {% endif %}
        {{ formRender.addSubmitButtons() }}
    </div> {# entire form #}
{% endblock %}

{% block preview %}
    {{ formRender.addPreview([studyID,groupID,measureID]) }}
{% endblock %}