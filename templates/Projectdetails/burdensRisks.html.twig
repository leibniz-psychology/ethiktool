{% extends 'threeColumns.html.twig' %}
{% import 'macros.html.twig' as formRender %}

{% block content %}
    {% set translationPrefix, inputDiv, isTextInput, contributors = 'projectdetails.pages.burdensRisks.', 'InputDiv', textInputCon is not same as '', content.burdensRisksContributors %}
    {% set textHintTrans, isNoBurdens, isContributorsSelected = translationPrefix~'textHint', content.noBurdens.vars.checked, contributors.vars.value is same as '0' %}
    {% set textInputParam = (isTextInput ? [[['noBurdens','noRisks'],['burdens'~inputDiv,'risks'~inputDiv]]] : []) %}
    {# burdens, risks, and burdens/risks for contributors #}
    <div>
        {% for type in ['burdens','risks','burdensRisksContributors'] %}
            {% set isBurdens, isBurdensRisks, checkboxes = type is same as 'burdens', type is not same as 'burdensRisksContributors', checkboxTypes[type] ?? [] %}
            {% set typePrefix, checkboxesWoNo, typeParam = translationPrefix~type~'.', checkboxes|slice(1), {'type': type} %}
            {% set hintsPrefix, anySelected = typePrefix~'hints.', getAnySelected(content,checkboxesWoNo)[1] %}
            {% set hintBurdensNothing, hintBurdensNo, hintDescription = (hintsPrefix~'missing')|trans, (hintsPrefix~'noBurdens')|trans, textHintTrans|trans(typeParam) %}
            {% set noID, descriptionDiv, compensationDiv = 'no'~(type|capitalize), type~'DescriptionDiv', type~'CompensationDiv' %}
            <div {% if not isBurdens %} class="mt-8" {% endif %}>
                {{ formRender.addHeading(typePrefix~'title',{'headingHint': [[hintsPrefix~'headingHint']]}) }}
                {% if isBurdensRisks %}
                    <div class="MetaData-Widget mt-2"
                            {{ stimulus_action('base',isBurdens ? 'setCheckboxTextfield' : 'setMultiCheckbox','change',{
                                'single': noID,
                                'multiCheck': checkboxesWoNo}|
                                merge(isBurdens
                                    ? {'checkboxes': [checkboxes,descriptionDiv,[isBurdens ? hintBurdensNothing,hintDescription,isBurdens ? hintBurdensNo],noID], 'setMulti': 'true'}
                                    : {}))|
                            stimulus_action('base','setVisibility','change',{
                                'multi': [[checkboxesWoNo,[compensationDiv]|merge(not isBurdens ? [descriptionDiv] : [])]]|
                                merge(textInputParam),
                                'setOr': [0]}) }}>
                        {{ formRender.addCheckboxGroup(content,checkboxes,{'icons': iconArrays[type]}|merge(anySelected or content[noID].vars.checked ? {'targets': anySelected ? [noID] : checkboxesWoNo} : {})) }}
                    </div>
                {% else %}
                    <div class="mt-2" {{ stimulus_action('base','setVisibility','change',{'values': [['0',[descriptionDiv,compensationDiv]]]}) }}>{{ formRender.renderButtons(contributors,noHeading) }}</div>
                {% endif %}
                {{ formRender.addTextfield(content[type~'Description'],{
                    'visibility': isBurdensRisks ? isBurdens or anySelected : isContributorsSelected,
                    'hint': not isBurdens or anySelected ? hintDescription : (isNoBurdens ? hintBurdensNo : hintBurdensNothing),
                    'attributes': textHeightLong|merge(isBurdens ? {'disabled': not anySelected and not isNoBurdens} : {})}) }}
                {# compensation #}
                <div class="mt-4" id="{{ compensationDiv }}" style="{{ boolToDisplay(isBurdensRisks ? anySelected : isContributorsSelected) }}">
                    {% set compensation, compensationPrefix = content[type~'Compensation'], translationPrefix~'compensation.textHints.' %}
                    {% set value = compensation.vars.value %}
                    {% set noSelection, yesTrans, noTrans = value is same as '', (compensationPrefix~'yes')|trans(typeParam), (compensationPrefix~'no')|trans %}
                    <div class="MetaData-Label">{{ form_label(compensation,null,labelDummy) }}</div>
                    {{ formRender.renderButtons(compensation,noHeading|merge({
                        'text': [content[type~'CompensationDescription'],{'hint': noSelection ? 'multiple.choiceTextHint' : (value is same as '0' ? yesTrans : noTrans), 'attributes': textHeightLong|merge({'disabled': noSelection})}],
                        'stim': ['base','setWidgetByValue',{'widgetValue': ['',type~'CompensationDescription',{'0': yesTrans, '1': noTrans}]}]})) }}
                </div>
                {% if isTextInput %}
                    <div class="mt-8">{{ formRender.addHint(textInputCon,{'visible': not (getAnySelected(content,checkboxTypes['burdens']|slice(1))[1] or getAnySelected(content,checkboxTypes['risks']|slice(1))[1]), 'id': type~inputDiv}) }}</div>
                {% endif %}
            </div>
        {% endfor %}
        {# finding #}
        {% set finding, addresseeParams, hintDiv, tempPrefix = content.finding, {'addressee': addresseeType}, 'findingHintDiv', translationPrefix~'finding.' %}
        {% set findingValue, informing, findingDiv, inputDiv = finding.vars.value, content.informing, 'findingDiv', 'inputDiv' %}
        {% set isFinding, isTextInput, isPre = findingValue is same as '0', textInputFinding is not same as '', information is same as 'pre' %}
        <div class="mt-8">
            {{ formRender.renderButtons(finding,{'text': [content.description,{'visibility': isFinding, 'textHintParams': addresseeParams, 'fontStyle': true}], 'hint': [tempPrefix], 'stimVisible': {'values': [['0',['descriptionDiv',findingDiv]]]|merge(isTextInput ? [['1',inputDiv]] : [])}}) }}
            <div id="{{ findingDiv }}" style="{{ boolToDisplay(isFinding) }}">
                <div class="MetaData-Label mt-4">{{ form_label(informing,null,labelDummy) }}</div>
                <div class="mt-2">{{ formRender.renderButtons(informing,noHeading|
                        merge({'hint': ['projectdetails.pages.burdensRisks.finding.informing.',addresseeParams]})|
                        merge(isPre ? {'stimVisible': {'values': [['always',hintDiv]]}} : {})) }}</div>
                {% if isPre %}
                    <div class="mt-4">
                        {{ formRender.addHint(tempPrefix~'informing.hint',{'id': hintDiv, 'visible': informing.vars.value is same as 'always', 'params': routeIDsParam}) }}
                    </div>
                {% endif %}
            </div>
            {% if isTextInput %}
                {{ formRender.addHint(textInputFinding,{'id': inputDiv, 'visible': findingValue is same as '1'}) }}
            {% endif %}
        </div>
        {# feedback #}
        {% set feedback = content.feedback %}
        {{ formRender.renderButtons(feedback,{'text': [content.feedbackDescription,{'visibility': feedback.vars.value is same as '0', 'fontStyle': true}], 'hint': [translationPrefix~'feedback.'], 'stimVisible': {'values': [['0','feedbackDescriptionDiv']]}, 'addDiv': []}) }}
        {{ formRender.addSubmitButtons() }}
    </div> {# entire form #}
{% endblock %}

{% block preview %}
    {{ formRender.addPreview([studyID,groupID,measureID]) }}
{% endblock %}