{% import 'macros.html.twig' as formRender %}
{% set isFilename, modalID, loadModalID = content['fileName']['titleValue'] is not empty, 'newFormModal', 'loadModal' %} {# isFilename: true if an application is open #}
{% set buttonWidth, isNewForm = 'width: 16rem; justify-self: center', activeRoute is same as 'app_newForm' %}
{# width must sum up to 100% with the two divs in threeColumns #}
<div class="border rounded-lg shadow-sm sticky top-0 bg-mono-50 overflow-hidden" id="sidebar" style="height: fit-content; min-width: min-content; max-width: max-content; width: 20%" {{ stimulus_target('base','sidebar') }}>
    {# filename and project title #}
    {% for key, value in content %}
        <div class="MetaData-Label gap-x-4 {% if not isFilename%} px-2 {% endif %}" style="display: flex">
            <div class="whitespace-nowrap">{{ value['title'] }}</div>
            {% set title = value['titleValue']  %}
            {% if key is same as 'projectTitle' and (title|length)>50 %}
                {% set title = title|slice(0,49)~'...' %}
            {% endif %}
            <div style="word-break: break-word">{{ title }}</div>
        </div>
    {% endfor %}
    {# new form, load form, save #}
    <div class="NavBar mt-8" style="{{ buttonWidth }}">
        <a class="Button_primary_act {% if isNewForm %} a_disabled {% endif %}" {% if not isNewForm %} {% if isFilename %} data-bs-toggle="modal" data-bs-target="#{{ modalID }}" {% endif %} href="{{ path('app_newForm') }}" {% endif %} onclick="{{ addTracking('Button Sidebar','New Form') }}">{{ 'pages.newForm'|trans }}</a>
        <button class="Button_primary_act" type="button" {{ stimulus_target('base','load') }} {% if isNewForm %} disabled {% elseif isFilename %} data-bs-toggle="modal" data-bs-target="#{{ loadModalID }}" {% else %} {{ stimulus_action('base','setDummySubmit','click') }} {% endif %} onclick="{{ addTracking('Button Sidebar','Load Form') }}">{{ 'navBar.loadForm'|trans }}</button>
        {{ formRender.addSaveButton(not isFilename,true) }}
    </div>
    {# pages #}
    <div class="mt-8 {% if anyError %} ms-2 {% else %} ms-3 {% endif %}">
        {{ _self.createSideMenu(windows.AppData,isFilename,activeRoute,[],0,anyError) }}
        {% set contributors = windows.Contributors %}
        {% set label = contributors.label ?? '' %}
        {% set isContributors = activeRoute is same as label %}
        {% set isNotContributors = isFilename and not isContributors %}
        <div class="flex" style="margin-left: {{ (contributors.error ?? false) ? '8px' : (anyError ? '28px' : '20px') }} !important;">
            {% if contributors.error ?? false %}
                <span {% if not isContributors%} style="margin-top: 0.75rem;" {% endif %}>{{ include('images/exclamation.svg') }}</span>
            {% endif %}
            <a class="mx-0 mt-2 dropdownNav flex {% if isNotContributors %}StudyNav-NavItem Button_navigation {% elseif isContributors %}StudyNav-NavItem_active{% elseif not isFilename %}NavBarMain{% endif %}"
               nosubpage
               {% if isNotContributors %}
                   href="{{ path(label) }}"
                   {{ stimulus_action('base','setDummySubmit','click',{'url': 'app_contributors'}) }}
               {% endif %}
               style="width: fit-content; {% if not isFilename %} color: black; pointer-events: none;{% endif %} {% if isContributors %} margin-top: 0 !important;{% endif %}"
            >
                {{ 'pages.contributors.contributors'|trans }}
            </a>
        </div>
        {{ _self.createSideMenu(windows.Projectdetails,isFilename,activeRoute,routeParams,0,anyError,true) }}
    </div>
    {# check document #}
    <button class="Button_primary_go NavBar mt-8" style="{{ buttonWidth }}" {% if isFilename %} {{ stimulus_action('base','setDummySubmit','click',{'url': 'app_checkDoc'}) }} {% else %}disabled {% endif %} onclick="{{ addTracking('Button Sidebar','Check Document') }}">{{ 'navBar.checkDoc'|trans }}</button>
    {# single documents and complete form #}
    <div class="NavBar mt-8" style="{{ buttonWidth }}">
        <button type="button" class="Button_primary_act" name="documents" {% if isFilename %} {{ stimulus_action('base','saveUndoDocuments','click') }} {% else %} disabled {% endif %} onclick="{{ addTracking('Button Sidebar','Single Documents') }}">{{ formRender.addButtonIcon('navBar.documents','pdf') }}</button>
        <button type="submit" class="Button_primary_go" {% if not (isFilename and isComplete) %} disabled {% else %} {{ stimulus_action('base','setDummySubmit','click',{'url': 'app_completeForm'})}} {% endif %} onclick="{{ addTracking('Button Sidebar','Complete Form') }}">{{ formRender.addButtonIcon('navBar.completeForm','pdf') }}</button>
    </div>
    {# program information and quit #}
    {% set quitModalID = 'quitModal' %}
    <div class="NavBar mt-8 mb-2" style="{{ buttonWidth }}">
        <button type="button" class="Button_primary_go" id="quit" name="quit" {% if isFilename %}data-bs-toggle="modal" data-bs-target="#{{ quitModalID }}" {% else %} {{ stimulus_action('base','setDummySubmit','click')}} {% endif %} onclick="{{ addTracking('Button Sidebar','Quit') }}">{{ formRender.addButtonIcon('navBar.quit','quit') }}</button>
    </div>
</div>
{% if isFilename %} {# must be outside the previous div because the div is sticky #}
    {% set quitPrefix = 'quitModal.'  %}
    {{ include('components/redirectModal.html.twig',{'modalID': modalID, 'prefix': 'main.newFormModal.', 'link': 'app_newForm'}) }}
    {{ include('components/redirectModal.html.twig',{'modalID': loadModalID, 'prefix': 'main.loadModal.', 'link': 'app_newForm', 'targetCont': 'base', 'redirectTarget': 'loadModal'}) }}
    {{ include('components/redirectModal.html.twig',{'modalID': quitModalID, 'prefix': quitPrefix, 'link': 'app_main', 'leftButton': quitPrefix~'leftButton', 'middleButton': quitPrefix~'middleButton', 'rightButton': quitPrefix~'rightButton'}) }}
{% endif %}

{% macro createSideMenu(window,isFilename,activeRoute,routeParams,level,anyError,isProjectdetails = false, visibility = false) %}
    {# Creates the side menu for the application data and project details pages. Input arguments:
        window:           array whose keys are the labels for the menu and values are either the route to a page or an array equally to window
        isFilename:       true if an application is open, i.e., if a filename exists
        activeRoute:      current page that is rendered
        routeParams:      parameter for the current page that is rendered. Only existent parameters are passed
        level:            current level. Top level is 0.
        anyError:         true if any inconsistency on any page exists
        isProjectdetails: if true, the side menu for the projectdetails pages is created, otherwise for the application data
        visibility:       visibility of the surrounding div
    #}

    <div class="{{ level>0 ? 'NavBar' : 'NavBarMain mt-2' }} {% if isProjectdetails and level is same as 4 or not isProjectdetails and level is same as 1 %} ms-2 me-0 mb-3 {% endif  %}" {% if level>0 %} style="{{ boolToDisplay(visibility,1) }}" {% endif %}>
        {% set isActiveAppData = activeRoute in ['app_coreData','app_votes','app_medicine','app_summary'] %}
        {% for route in window %}
            {% set hasSubPages, routeIDs, curRoute = route.subPages is defined, route.routeIDs ?? {}, route.route %}
            {% set isRoute, numIDs = curRoute is not same as '', routeIDs|length %}
            {% set isActivePath = isActiveAppData and not isProjectdetails or isProjectdetails and routeParams is not same as {} and (routeParams|length is not same as numIDs or numIDs is same as 3) %}
            {% for key, id in routeIDs %}
                {% set isActivePath = isActivePath and (routeParams[key] ?? -1) is same as id %}
            {% endfor %}
            {% set isCurrentActive = curRoute is same as activeRoute and isActivePath %}
            <div class="flex" style="margin-left: {{ (route.error ?? false) ? '0' : (anyError and not (hasSubPages and isCurrentActive) ? '20px' : '12px') }}">
                {% if route.error ?? false %}
                    <span class="{% if isCurrentActive or not hasSubPages %} mt-0 {% else %} mt-1 {% endif %}">{{ include('images/exclamation.svg') }}</span>
                {% endif %}
                <a class="flex {% if hasSubPages %} StudyNav-NavItem Button_navigation {% elseif isCurrentActive %} StudyNav-NavItem_active {% endif %}"
                   {% if isFilename and isRoute and (not isCurrentActive or curRoute is same as 'app_landing') %}
                        href="{{ path(curRoute,routeIDs) }}"
                        {{ stimulus_action('base','setDummySubmit','click',{'route-i-ds': routeIDs, 'url': curRoute}|merge(hasSubPages ? {'page': isProjectdetails ? 'Projectdetails' : 'AppData'} : {})) }}
                   {% endif %}
                    style="width: fit-content; {% if not isRoute or not isFilename %}color: black; pointer-events: none;{% endif %}"
                   {% if not hasSubPages %}
                        nosubpage
                   {% endif %}
                >
                    {{ route.label }}
                </a>
                {% if hasSubPages %}
                    <span class="{{ 'dropdown'~(isActivePath ? 'Expanded' : 'Collapsed') }} dropdownNav clickable mt-1" style="height: 1.5rem"></span>
                {% endif %}
            </div>
            {% if hasSubPages %}
                {{ _self.createSideMenu(route.subPages,isFilename,activeRoute,routeParams,level+1,anyError,isProjectdetails,isActivePath) }}
            {% endif %}
        {% endfor %}
    </div>
{% endmacro %}